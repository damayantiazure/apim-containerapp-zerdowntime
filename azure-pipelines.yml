trigger: none
#- main

variables:
  dockerRegistryServiceConnection: 'acrconnection'
  imageRepository: 'neptune-webapi'
  # dockerfilePath: '$(Build.SourcesDirectory)/app/Dockerfile'
  tag: '$(Build.BuildId)'
  acrName: 'solardemo1contregistrydev'
  resourceGroup: 'APIM-DEVOPS-Coantapp'
  containerAppName: 'neptune-webapi'
  containerAppEnvironment: 'solardemo1-appenv-dev'  



stages:
- stage: DeployContainerapp
  jobs:
  - job: BuildDockerimageandpush
    pool: default
      
    steps:

    - task: Docker@2
      inputs:
        containerRegistry: 'acrconnection'
        repository: $(imageRepository)
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)

  - job: UpdateContainerapp
    pool: default      
    steps:   
    
    #Specify python version if you have side-by-side versions
 

    # Install Azure DevOps extension
    - bash: az extension add -n azure-devops
      displayName: 'Install Azure DevOps extension'

# Now you can make calls into Azure DevOps CLI
# ...   
   
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'       
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name containerapp --upgrade
          az provider register --namespace Microsoft.App
          az provider register --namespace Microsoft.OperationalInsights    
      
          az containerapp update --name neptune-webapi --resource-group APIM-DEVOPS-Coantapp --image solardemo1contregistrydev.azurecr.io/neptune-webapi:$(tag)
    
    # The newly deployed revision can be tested by using the label-specific FQDN
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'masterconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          #get the containerapp environment default domain
          export APP_DOMAIN=$(az containerapp env show -g $resourceGroup -n $APP_ENVIRONMENT_NAME --query properties.defaultDomain -o tsv | tr -d '\r\n')
          
          #Test the production FQDN
          curl -s https://$containerAppName.$APP_DOMAIN/api/env | jq | grep COMMIT
          
          #Test the blue lable FQDN
          curl -s https://$containerAppName---blue.$APP_DOMAIN/api/env | jq | grep COMMIT
          
          #Test the green lable FQDN
          curl -s https://$containerAppName---green.$APP_DOMAIN/api/env | jq | grep COMMIT

      
       